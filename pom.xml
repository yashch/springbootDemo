<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- 描述这个POM文件是遵从哪个版本的项目描述符 -->
	<modelVersion>4.0.0</modelVersion>
	
	<!-- 从springboot继承默认值 -->
	<parent>
	    <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.2.3.RELEASE</version>
	 </parent>
	 
	 <!-- maven基础设置 -->
	<groupId>com.lesaas</groupId>				<!-- 项目或者组织的唯一标志，并且配置时生成路径也是由此生成，如org.myproject.mojo生成的相对路径为：/org/myproject/mojo -->
	<artifactId>slardar</artifactId>				<!-- 项目的模块名称 -->
	<version>1.0-SNAPSHOT</version>			<!-- 项目版本 -->
	<packaging>war</packaging>					<!-- 打包机制 -->
	<name>Springside :: Slardar :: QuickStart</name>			<!-- 用户描述项目的名称，无关紧要的东西，可选 -->
	
	<!-- <url>http://maven.apache.org</url> -->			<!-- 应该是只是写明开发团队的网站，无关紧要，可选 -->

	<!-- properties是为pom定义一些常量，在pom中的其它地方可以直接引用 -->
	<properties>
		<springside-core.version>4.2.2.GA</springside-core.version>
		<commons-beanutils.version>1.8.3</commons-beanutils.version>
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<commons-codec.version>1.9</commons-codec.version>
		<mybatis-spring.version>1.2.2</mybatis-spring.version>
		<alibaba.druid.version>1.0.14</alibaba.druid.version>
		<ehcache.version>2.6.8</ehcache.version>
		<sitemesh.version>3.0.1</sitemesh.version>
		
	
		<!-- Plugin的属性定义 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	
		<!-- 项目属性 -->
		<jdbc.driver.groupId>com.oracle</jdbc.driver.groupId>
		<jdbc.driver.artifactId>ojdbc6</jdbc.driver.artifactId>
		<jdbc.driver.version>11.2.0.1.0</jdbc.driver.version> 
		
	</properties>

	<prerequisites>
  		<maven>3.0.0</maven>
	</prerequisites>


    <!--依赖关系 -->
	<dependencies>
		
		<!-- start-web -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- RESTFUL API jersey dependecy-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
        </dependency>
        
         <!-- redis config -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-redis</artifactId>
        </dependency>
        
        <!-- jpa -->
         <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- mybatis -->
       <!--  <dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>1.0.0</version>
		</dependency> -->
		<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		   <!--  请不要使用1.0.0版本，因为还不支持拦截器插件 -->
		    <version>1.1.1</version>
		</dependency>
		
		
		<!-- embed -->
		<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-tomcat</artifactId>
	      <!--<scope>provided</scope>-->
	    </dependency>
		 <dependency>
	        <groupId>org.apache.tomcat.embed</groupId>
	        <artifactId>tomcat-embed-jasper</artifactId>
	        <scope>provided</scope>
	    </dependency>
        
        
        <!-- 其它非spring-boot依赖 -->
        <!-- oracle jdbc driver -->
        <!--<dependency>
            <groupId>${jdbc.driver.groupId}</groupId>
            <artifactId>${jdbc.driver.artifactId}</artifactId>
            <version>${jdbc.driver.version}</version>
            <scope>runtime</scope>
        </dependency>-->
		<!-- mysql jdbc driver-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
        
        <!-- hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
        <dependency>
	      <groupId>org.hibernate</groupId>
	      <artifactId>hibernate-core</artifactId>
	      <version>4.3.7.Final</version>
	    </dependency>
	    <!-- end hibernate -->

        <!-- springside-core  -->
		<!--<dependency>
			<groupId>org.springside</groupId>
			<artifactId>springside-core</artifactId>
			<version>${springside-core.version}</version>
		</dependency>-->

        <dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>${ehcache.version}</version>
		</dependency>
		
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${commons-beanutils.version}</version>
		</dependency>
		
		<!-- GENERAL UTILS begin -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>
		
		<!-- base64 -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>${commons-codec.version}</version>
		</dependency>
		<!-- 实体类注解 -->
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0.2</version>
		</dependency>
		<!-- jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- sitemash -->
		<dependency>
            <groupId>org.sitemesh</groupId>
            <artifactId>sitemesh</artifactId>
            <version>${sitemesh.version}</version>
        </dependency>
		
	</dependencies>

	<build>
		<plugins>
			<!-- compiler插件, 设定JDK版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<showWarnings>false</showWarnings>
				</configuration>
			</plugin>

			<!-- war打包插件, 设定war包名称不带版本号 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warName>${project.artifactId}</warName>
				</configuration>
			</plugin>

			<!-- test插件, 仅测试名称为*Test的类,使用支持分组测试的surefire-junit47 driver -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<!-- <includes>
						<include>**/*Test.java</include>
					</includes> -->
					<argLine>-Xmx256M</argLine>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.16</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- 增加functional test的Source目录 -->
			<!-- <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>add-functional-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/functional</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin> -->

			<!-- cobertura插件, 设置不需要计算覆盖率的类 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.6</version>
				<!--<configuration>
					<instrumentation>
						<excludes>
							<exclude>**/entity/**/*.class</exclude>
							<exclude>**/*Controller.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>-->
			</plugin>

			<!-- resources插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
			</plugin>

			<!-- install插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.1</version>
			</plugin>

			<!-- ant插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
			</plugin>
		</plugins>
		
		<!--maven编译时将map.xml文件一同编译 -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>*.*</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/resources/xmlTemp</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<targetPath>xmlTemp/</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources/newCertificate</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<targetPath>newCertificate/</targetPath>
				<filtering>false</filtering>
			</resource>
		</resources>
		
	</build>
	
	<!-- 仓库设置 -->
	<repositories>
		<repository>
			<id>central</id>
			<name>Central Repository</name>
			<url>http://repo.roshan.top/nexus/content/groups/public</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
    
    <!-- 设定插件仓库, 如有Nexus私服, 取消注释并指向正确的服务器地址. -->
	<pluginRepositories>
		<pluginRepository>
			<id>nexus</id>
			<name>central Repository</name>
			<url>http://repo.roshan.top/nexus/content/groups/public</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>
	
	
	
</project>
